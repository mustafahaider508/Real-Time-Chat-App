{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('user/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = 1;\n    },\n    logout: state => {\n      state.user -= 1;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = userSlice.actions;\nexport const selectUser = state => state.user.user;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/mac/Reactjs/imessage/src/features/counter/counterSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","userSlice","name","reducers","login","state","action","user","logout","actions","selectUser","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,iBAD4C,EAE5C,MAAOO,MAAP,IAAkB;AAChB,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC,CADgB,CAEhB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;AACnCU,EAAAA,IAAI,EAAE,MAD6B;AAEnCR,EAAAA,YAFmC;AAGnC;AACAS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAEvBD,MAAAA,KAAK,CAACE,IAAN,GAAa,CAAb;AACD,KAJO;AAKRC,IAAAA,MAAM,EAAGH,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACE,IAAN,IAAc,CAAd;AACD;AAPO;AAJyB,CAAD,CAA7B;AAiBP,OAAO,MAAM;AAAEH,EAAAA,KAAF;AAASI,EAAAA;AAAT,IAAoBP,SAAS,CAACQ,OAApC;AAEP,OAAO,MAAMC,UAAU,GAAIL,KAAD,IAAWA,KAAK,CAACE,IAAN,CAAWA,IAAzC;AAEP,eAAeN,SAAS,CAACU,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'user/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state,action) => {\n      \n      state.user = 1;\n    },\n    logout: (state) => {\n      state.user -= 1;\n    },\n      \n  },\n \n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}